/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        dot: dot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp F     &kp P        &kp G        &kp J        &kp L  &kp U     &kp Y  &kp SEMICOLON  &kp BSPC
&kp LCTRL  &kp A  &kp R  &kp S     &mt LSHFT T  &kp D        &mt H LSHFT  &kp N  &kp E     &kp I  &kp O          &kp SQT
&kp LSHFT  &kp Z  &kp Z  &kp C     &kp V        &kp B        &kp K        &kp M  &kp X     &dot   &kp FSLH       &kp ESC
                         &kp LGUI  &mo 1        &kp SPACE    &lt 2 SPACE  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp DEL  &kp DOT  &kp MINUS  &kp LS(PLUS)  &kp LS(UNDER)  &none        &none     &none   &none     &none   &none   &none
&none    &kp N0   &kp N1     &kp N2        &kp N3         &kp N4       &kp N5    &kp N6  &kp N7    &kp N8  &kp N9  &trans
&none    &trans   &trans     &kp FSLH      &trans         &trans       &kp FSLH  &trans  &kp X     &trans  &trans  &trans
                             &kp LGUI      &trans         &kp SPACE    &kp RET   &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        navigation {
            bindings = <
&trans  &trans             &trans             &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LC(LS(J)))  &kp LS(LC(LG(H)))  &kp LG(LA(J))  &kp LA(LG(H))  &kp LG(LC(R))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans             &trans             &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
                                              &trans         &trans         &trans           &trans  &trans  &trans
            >;
        };
    };
};
