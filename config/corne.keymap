/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        dot: dot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };

        ht_ctl: ht_ctl {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CTL";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        nx_fn: nx_fn {
            compatible = "zmk,behavior-sticky-key";
            label = "NX_FN";
            bindings = <&to>;
            #binding-cells = <1>;
            release-after-ms = <500>;
        };

        lyr_num: lyr_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LYR_NUM";
            bindings = <&to>, <&nx_fn>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };

        ht_lyr: ht_lyr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LYR";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "balanced";
        };

        ht_k: ht_k {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_K";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        as: as {
            compatible = "zmk,behavior-sticky-key";
            label = "AS";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <400>;
        };

        tdth: tdth {
            compatible = "zmk,behavior-tap-dance";
            label = "TDTH";
            #binding-cells = <0>;
            bindings = <&lt 3 SPACE>, <&ht_lyr 1 4>;
        };

        sy_mt: sy_mt {
            compatible = "zmk,behavior-tap-dance";
            label = "SY_MT";
            #binding-cells = <0>;
            bindings = <&ht_lyr 4 4>, <&kp LEFT_META>;
        };

        sy_ra: sy_ra {
            compatible = "zmk,behavior-tap-dance";
            label = "SY_RA";
            #binding-cells = <0>;
            bindings = <&ht_lyr 4 4>, <&kp RALT>;
        };

        lyr3_ctl: lyr3_ctl {
            compatible = "zmk,behavior-tap-dance";
            label = "LYR3_CTL";
            #binding-cells = <0>;
            bindings = <&ht_lyr 3 3>, <&ht_ctl LCTRL LCTRL>;
        };

        left_hrm: left_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38 0 12 24>;
            bindings = <&kp>, <&kp>;
        };

        right_hrm: right_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 11 23 35>;
        };

        left_hrm2: left_hrm2 {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM2";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 8 36 37 38 0 12 24>;
            bindings = <&mo>, <&kp>;
        };

        right_hrm2: right_hrm2 {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM2";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 2 3 4 39 40 41 11 23 35>;
        };

        right_hrm_3: right_hrm_3 {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM_3";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38 0 12 24>;
            bindings = <&kp>, <&kp>;
        };

        left_hrm_3: left_hrm_3 {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM_3";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38 0 12 24>;
            bindings = <&kp>, <&kp>;
        };

        mtab: mtab {
            compatible = "zmk,behavior-tap-dance";
            label = "MTAB";
            #binding-cells = <0>;
            bindings = <&on_MTab>, <&kp LG(TAB)>;

            tapping-term-ms = <150>;
        };
    };

    macros {
        sret: sret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(RET)>;
            label = "SRET";
        };

        af4: af4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp F4 &kt LEFT_ALT>;
            label = "AF4";
        };

        endRet: endRet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp RET>;
            label = "ENDRET";
        };

        cpln: cpln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp HOME &kp LS(END) &kp LS(END) &kp LS(END) &kp LC(C) &kp END>;
            label = "CPLN";
        };

        dlln: dlln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp LS(END) &kp LS(END) &kp DEL>;
            label = "DLLN";
        };

        sw1: sw1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(LEFT_ARROW)) &kp LG(LA(H)) &kp LS(LG(RIGHT))>;
            label = "SW1";
        };

        sw2: sw2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(RIGHT)) &kp LA(LG(H)) &kp LS(LG(LEFT_ARROW))>;
            label = "SW2";
        };

        capsword: capsword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &caps_word>;
            label = "CAPSWORD";
        };

        toFunc: toFunc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &to 4 &tog 8>;
            label = "TOFUNC";
        };

        leave_func: leave_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &to 0>;
            label = "LEAVE_FUNC";
        };

        left3: left2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "LEFT2";
        };

        left6: left6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&left3 &left3>;
            label = "LEFT6";
        };

        left9: left9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&left3 &left3 &left3>;
            label = "LEFT9";
        };

        c_left3: c_left3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LEFT_ARROW) &kp LC(LEFT_ARROW)>;
            label = "C_LEFT3";
        };

        c_left6: c_left6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&c_left3 &c_left3>;
            label = "C_LEFT6";
        };

        c_left9: c_left9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&c_left3 &c_left3 &c_left3>;
            label = "C_LEFT9";
        };

        right3: right3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &kp RIGHT &kp RIGHT>;
            label = "RIGHT3";
        };

        right6: right6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&right3 &right3>;
            label = "RIGHT6";
        };

        right9: right9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&right3 &right3 &right3>;
            label = "RIGHT9";
        };

        c_right3: c_right3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(RIGHT) &kp LC(RIGHT)>;
            label = "C_RIGHT3";
        };

        c_right6: c_right6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&c_right3 &c_right3>;
            label = "C_RIGHT6";
        };

        c_right9: c_right9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&c_right3 &c_right3 &c_right3>;
            label = "C_RIGHT9";
        };

        down2: down2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN_ARROW>;
            label = "DOWN2";
        };

        down4: down4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&down2 &down2>;
            label = "DOWN4";
        };

        down6: down6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&down2 &down2 &down2>;
            label = "DOWN6";
        };

        up2: up2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP &kp UP>;
            label = "UP2";
        };

        up4: up4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&up2 &up2>;
            label = "UP4";
        };

        up6: up6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&up2 &up2 &up2>;
            label = "UP6";
        };

        on_MTab: on_MTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &tog 10 &kp TAB>;
            label = "ON_MTAB";
        };

        on_MSTab: on_MSTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &tog 10 &kp LS(TAB)>;
            label = "ON_MSTAB";
        };

        off_MTab: off_MTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &tog 10>;
            label = "OFF_MTAB";
        };

        STab_2: STab_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(TAB) &kp LS(TAB)>;
            label = "STAB_2";
        };

        Tab_2: Tab_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp TAB>;
            label = "TAB_2";
        };
    };

    combos {
        compatible = "zmk,combos";

        arrowToggle {
            bindings = <&tog 9>;
            key-positions = <15 16>;
            layers = <4 9>;
        };

        arrowToggle2 {
            bindings = <&tog 9>;
            key-positions = <19 20>;
            layers = <4 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LS(LC(LG(D)))  &none  &kp W           &kp F                &kp P              &kp G          &kp J        &kp L               &kp U                 &kp Y            &none          &none
&none              &kp A  &left_hrm2 3 R  &left_hrm_3 LCTRL S  &left_hrm LSHFT T  &kp D          &kp H        &right_hrm LSHFT N  &right_hrm_3 LCTRL E  &right_hrm2 3 I  &kp O          &none
&none              &kp Q  &kp Z           &kp C                &kp V              &kp B          &kp K        &kp M               &kp X                 &dot             &kp SEMICOLON  &none
                                          &ht_lyr 1 4          &none              &ht_lyr 1 4    &ht_lyr 1 4  &lt 2 SPACE         &ht_lyr 1 4
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp DOT  &kp MINUS       &kp LS(PLUS)  &kp LS(UNDER)  &none            &none      &to 5          &to 6   &none   &kp COLON  &none
&none  &kp N0   &kp N1          &kp N2        &kp N3         &kp N4           &kp N5     &kp N6         &kp N7  &kp N8  &kp N9     &none
&none  &none    &kp LEFT_ARROW  &kp RIGHT     &kp DELETE     &kp BACKSPACE    &kp FSLH   &kp LA(SPACE)  &kp X   &dot    &none      &none
                                &none         &to 0          &kp SPACE        &kp SPACE  &to 0          &none
            >;
        };

        navigation {
            bindings = <
&none  &none               &kp LG(LC(LS(T)))  &kp LG(LC(LS(Q)))   &kp LG(RET)    &af4                 &on_MSTab             &mtab              &kp LG(H)                &kp LG(F)               &none              &none
&none  &kp LG(LC(LS(J)))   &kp LS(LC(LG(H)))  &kp LG(LA(J))       &kp LA(LG(H))  &kp LG(LC(LS(R)))    &kp LG(LC(UP_ARROW))  &kp LS(LC(LG(Z)))  &kp LG(LC(RIGHT))        &kp LG(LS(LEFT_ARROW))  &kp LS(LG(RIGHT))  &none
&none  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)   &kp LG(LEFT_ARROW)  &kp LG(RIGHT)  &kp LG(F5)           &kp LG(F6)            &kp LC(LG(LEFT))   &kp LC(LG(RIGHT_ARROW))  &kp LC(END)             &kp LC(HOME)       &none
                                              &none               &none          &none                &none                 &none              &none
            >;
        };

        symbols {
            bindings = <
&none  &kp GRAVE      &kp AMPERSAND    &kp ASTRK    &kp TILDE          &kp QUESTION     &kp BSLH       &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &none             &none
&none  &kp PERCENT    &kp UNDER        &kp CARET    &kp APOSTROPHE     &kp EQUAL        &kp PLUS       &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR        &none
&none  &kp LESS_THAN  &kp EXCLAMATION  &kp AT       &kp DOUBLE_QUOTES  &kp GRAVE        &kp FSLH       &kp HASH   &kp LBKT              &kp RBKT               &kp GREATER_THAN  &none
                                       &ht_lyr 7 7  &none              &ht_lyr 11 11    &ht_lyr 11 11  &none      &ht_lyr 7 7
            >;
        };

        functions {
            bindings = <
&none  &none         &kp ESC         &capsword     &dlln          &kp LC(LS(TAB))    &kp LC(TAB)  &cpln                    &sret          &kp END   &kp HOME  &none
&none  &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &kp LS(TAB)        &kp TAB      &kp RET                  &kp LC(BSPC)   &kp BSPC  &endRet   &none
&none  &kp LC(LEFT)  &kp LC(DOWN)    &kp LC(UP)    &kp LC(RIGHT)  &kp LA(SPACE)      &kp DELETE   &kp LG(LS(PRINTSCREEN))  &kp LC(LA(T))  &none     &none     &none
                                     &kp LMETA     &toFunc        &toFunc            &toFunc      &toFunc                  &kp RALT
            >;
        };

        qwerty {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y      &kp U     &kp I      &kp O    &kp P     &kp BSPC
&kp CAPS   &kp A  &kp S  &kp D  &kp F      &kp G        &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V      &kp B        &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &to 0  &kp LCTRL  &kp SPACE    &kp SPACE  &kp LALT  &kp LMETA
            >;
        };

        annotation {
            bindings = <
&none  &kp N4  &kp N5  &kp N6     &kp N7      &none           &none  &none  &none  &none  &none  &none
&none  &kp N0  &kp N1  &kp N2     &kp N3      &kp NUMBER_4    &none  &none  &none  &none  &none  &none
&none  &kp N8  &kp N9  &kp LC(Z)  &kp K_REDO  &kp LC(S)       &none  &none  &none  &none  &none  &none
                       &to 0      &to 0       &none           &none  &none  &none
            >;
        };

        system {
            bindings = <
&none  &kp F1      &kp F2      &kp F3           &kp F4             &kp F5    &kp F6  &kp F7        &kp F8              &kp F9                    &kp F10                   &none
&none  &kp K_MUTE  &kp K_PREV  &kp K_NEXT       &kp K_PLAY_PAUSE   &to 12    &to 6   &kp C_REWIND  &kp C_FAST_FORWARD  &kp C_BRI_INC             &kp C_BRI_DEC             &none
&none  &kp F11     &kp F12     &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &to 13    &to 5   &none         &none               &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_MAXIMUM  &none
                               &none            &none              &none     &none   &none         &none
            >;
        };

        func_helper {
            bindings = <
&trans  &trans  &trans  &trans       &trans       &trans         &trans       &trans       &trans       &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans       &trans         &trans       &trans       &trans       &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans       &trans         &trans       &trans       &trans       &trans  &trans  &trans
                        &leave_func  &leave_func  &leave_func    &leave_func  &leave_func  &leave_func
            >;
        };

        arrow {
            bindings = <
&none  &none  &down2    &down4    &down6    &none    &none  &up6       &up4       &up2       &none  &none
&none  &none  &left3    &left6    &left9    &none    &none  &right9    &right6    &right3    &none  &none
&none  &none  &c_left3  &c_left6  &c_left9  &none    &none  &c_right9  &c_right6  &c_right3  &none  &none
                        &none     &none     &none    &none  &none      &none
            >;
        };

        tab_helper {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &kp LS(TAB)  &kp TAB    &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &STab_2      &Tab_2     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans       &trans     &trans     &trans  &trans  &trans
                        &off_MTab  &off_MTab  &off_MTab    &off_MTab    &off_MTab  &off_MTab
            >;
        };

        modifier {
            bindings = <
&none  &none                     &none            &none              &ht_k LA(LSHFT) LA(LSHFT)  &none    &none  &ht_k LA(LSHFT) LA(LSHFT)  &none              &none                &none                      &none
&none  &ht_k LEFT_META LEFT_WIN  &ht_k LALT LALT  &ht_k LCTRL LCTRL  &ht_k LSHFT LSHFT          &none    &none  &ht_k LSHFT LSHIFT         &ht_k LCTRL LCTRL  &ht_k LEFT_ALT LALT  &ht_k LEFT_META LEFT_META  &none
&none  &none                     &none            &none              &none                      &none    &none  &none                      &none              &none                &none                      &none
                                                  &none              &none                      &none    &none  &none                      &none
            >;
        };

        plaintext {
            bindings = <
&none  &none  &kp W  &kp F  &kp P      &kp G        &kp J      &kp L      &kp U  &kp Y  &none          &none
&none  &kp A  &kp R  &kp S  &kp T      &kp D        &kp H      &kp N      &kp E  &kp I  &kp O          &none
&none  &kp Q  &kp Z  &kp C  &kp V      &kp B        &kp K      &kp M      &kp X  &dot   &kp SEMICOLON  &none
                     &to 0  &kp SPACE  &kp SPACE    &kp SPACE  &kp SPACE  &to 0
            >;
        };

        one_handed_0 {
            bindings = <
&none  &none  &kp W  &kp F  &kp P      &kp G            &kp J      &kp L      &kp U  &kp Y  &none          &none
&none  &kp A  &kp R  &kp S  &kp T      &kp D            &kp H      &kp N      &kp E  &kp I  &kp O          &none
&none  &kp Q  &kp Z  &kp C  &kp V      &kp B            &kp K      &kp M      &kp X  &dot   &kp SEMICOLON  &none
                     &to 0  &kp SPACE  &ht_lyr 14 14    &kp SPACE  &kp SPACE  &to 0
            >;
        };

        one_handed_1 {
            bindings = <
&none  &kp J  &kp L  &kp U  &kp Y      &none        &none      &kp W      &kp F  &kp P  &kp G  &none
&none  &kp H  &kp N  &kp E  &kp I      &kp O        &kp A      &kp R      &kp S  &kp T  &kp D  &none
&none  &kp K  &kp M  &kp X  &dot       &kp SEMI     &kp Q      &kp Z      &kp C  &kp V  &kp B  &none
                     &to 0  &kp SPACE  &kp SPACE    &kp SPACE  &kp SPACE  &to 0
            >;
        };
    };
};
