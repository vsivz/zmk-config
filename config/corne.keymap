/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        dot: dot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };

        ht_ctl: ht_ctl {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CTL";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        nx_fn: nx_fn {
            compatible = "zmk,behavior-sticky-key";
            label = "NX_FN";
            bindings = <&to>;
            #binding-cells = <1>;
            release-after-ms = <500>;
        };

        lyr_num: lyr_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LYR_NUM";
            bindings = <&to>, <&nx_fn>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&ht_ctl LCTRL LCTRL  &kp Q     &kp W  &kp F     &kp P        &kp G           &kp J        &kp L        &kp U     &kp Y  &kp SEMICOLON  &ht_ctl LCTRL LCTRL
&kp LCTRL            &kp A     &kp R  &kp S     &mt LSHFT T  &kp D           &kp H        &mt LSHFT N  &kp E     &kp I  &kp O          &kp SQT
&kp LSHFT            &nx_fn 3  &kp Z  &kp C     &kp V        &kp B           &kp K        &kp M        &kp X     &dot   &nx_fn 3       &kp ESC
                                      &kp LGUI  &mo 1        &lyr_num 1 4    &lt 2 SPACE  &mo 0        &kp RALT
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp DEL  &kp DOT  &kp MINUS  &kp LS(PLUS)  &kp LS(UNDER)  &none        &none     &none   &none     &none   &kp COLON  &none
&none    &kp N0   &kp N1     &kp N2        &kp N3         &kp N4       &kp N5    &kp N6  &kp N7    &kp N8  &kp N9     &trans
&none    &trans   &trans     &kp FSLH      &trans         &trans       &kp FSLH  &trans  &kp X     &trans  &trans     &trans
                             &kp LGUI      &trans         &kp SPACE    &kp RET   &trans  &kp RALT
            >;
        };

        navigation {
            bindings = <
&trans  &trans             &trans             &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LC(LS(J)))  &kp LS(LC(LG(H)))  &kp LG(LA(J))  &kp LA(LG(H))  &kp LG(LC(R))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans             &trans             &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
                                              &trans         &trans         &trans           &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp GRAVE    &kp AMPERSAND    &kp ASTRK  &kp SQT            &kp QUESTION    &kp BSLH  &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LS(COLON)  &trans
&trans  &kp PERCENT  &kp UNDER        &kp CARET  &kp BACKSLASH      &kp EQUAL       &kp PLUS  &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR     &trans
&trans  &trans       &kp EXCLAMATION  &kp AT     &kp DOUBLE_QUOTES  &kp GRAVE       &kp FSLH  &kp HASH   &kp LBKT              &kp RBKT               &trans         &trans
                                      &trans     &trans             &trans          &trans    &trans     &trans
            >;
        };

        functions {
            bindings = <
&trans  &trans        &kp ESC         &trans        &trans         &trans    &trans   &trans   &trans        &kp END   &kp HOME  &trans
&trans  &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &trans    &kp TAB  &kp RET  &kp LC(BSPC)  &kp BSPC  &kp END   &kp RET
&trans  &kp LC(LEFT)  &kp LC(DOWN)    &kp LC(UP)    &kp LC(RIGHT)  &trans    &kp DEL  &trans   &trans        &trans    &trans    &trans
                                      &trans        &trans         &trans    &trans   &trans   &trans
            >;
        };
    };
};
