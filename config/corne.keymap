/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        dot: dot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };

        ht_ctl: ht_ctl {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CTL";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        nx_fn: nx_fn {
            compatible = "zmk,behavior-sticky-key";
            label = "NX_FN";
            bindings = <&to>;
            #binding-cells = <1>;
            release-after-ms = <500>;
        };

        lyr_num: lyr_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LYR_NUM";
            bindings = <&to>, <&nx_fn>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };

        ht_lyr: ht_lyr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LYR";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        ht_k: ht_k {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_K";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            flavor = "balanced";
        };

        as: as {
            compatible = "zmk,behavior-sticky-key";
            label = "AS";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <400>;
        };

        tdth: tdth {
            compatible = "zmk,behavior-tap-dance";
            label = "TDTH";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&ht_lyr 1 4>;
        };
    };

    macros {
        sret: sret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(RET)>;
            label = "SRET";
        };

        af4: af4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp F4 &kt LEFT_ALT>;
            label = "AF4";
        };

        endRet: endRet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp RET>;
            label = "ENDRET";
        };

        cpln: cpln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp HOME &kp LS(END) &kp LC(C) &kp END>;
            label = "CPLN";
        };

        dlln: dlln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp LS(END) &kp DEL>;
            label = "DLLN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp W  &kp F     &kp P          &kp G                  &kp J                &kp L          &kp U     &kp Y  &kp SEMICOLON  &none
&to 4  &kp A        &kp R  &kp S     &ht_k LSHFT T  &kp D                  &kp H                &ht_k LSHFT N  &kp E     &kp I  &kp O          &to 4
&none  &ht_lyr 3 3  &kp Z  &kp C     &kp V          &kp B                  &kp K                &kp M          &kp X     &dot   &ht_lyr 3 3    &none
                           &kp LGUI  &ht_lyr 1 4    &ht_ctl LCTRL LCTRL    &ht_ctl LCTRL LCTRL  &tdth          &kp RALT
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp DEL  &kp DOT  &kp MINUS  &kp LS(PLUS)  &kp LS(UNDER)  &none        &none     &none          &none     &none   &kp COLON  &none
&none    &kp N0   &kp N1     &kp N2        &kp N3         &kp N4       &kp N5    &kp N6         &kp N7    &kp N8  &kp N9     &none
&none    &none    &none      &kp FSLH      &none          &none        &kp FSLH  &kp LA(SPACE)  &kp X     &none   &none      &none
                             &kp LGUI      &none          &kp SPACE    &kp RET   &none          &kp RALT
            >;
        };

        navigation {
            bindings = <
&none  &none               &kp LG(LC(LS(T)))  &kp LG(LC(LS(Q)))   &kp LG(RET)    &af4                 &dlln                 &none              &none              &none                   &none              &none
&none  &kp LG(LC(LS(J)))   &kp LS(LC(LG(H)))  &kp LG(LA(J))       &kp LA(LG(H))  &kp LG(LC(LS(R)))    &kp LG(LC(UP_ARROW))  &kp LS(LC(LG(Z)))  &kp LG(LC(RIGHT))  &kp LG(LS(LEFT_ARROW))  &kp LS(LG(RIGHT))  &none
&none  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)   &kp LG(LEFT_ARROW)  &kp LG(RIGHT)  &none                &cpln                 &kp LC(HOME)       &kp LC(END)        &none                   &none              &none
                                              &none               &none          &none                &none                 &none              &none
            >;
        };

        symbols {
            bindings = <
&none  &kp GRAVE    &kp AMPERSAND    &kp ASTRK  &kp SQT            &kp QUESTION    &kp BSLH  &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LS(COLON)  &none
&none  &kp PERCENT  &kp UNDER        &kp CARET  &kp BACKSLASH      &kp EQUAL       &kp PLUS  &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR     &none
&none  &none        &kp EXCLAMATION  &kp AT     &kp DOUBLE_QUOTES  &kp GRAVE       &kp FSLH  &kp HASH   &kp LBKT              &kp RBKT               &none          &none
                                     &none      &none              &none           &none     &none      &none
            >;
        };

        functions {
            bindings = <
&none  &none         &kp ESC         &none         &as LA(LSHFT)  &kp LC(TAB)      &kp LS(LC(TAB))  &sk LEFT_META            &sret          &kp END   &kp HOME  &none
&none  &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &kp RMETA        &kp TAB          &kp RET                  &kp LC(BSPC)   &kp BSPC  &endRet   &kp RET
&none  &kp LC(LEFT)  &kp LC(DOWN)    &kp LC(UP)    &kp LC(RIGHT)  &kp LA(SPACE)    &kp DELETE       &kp LG(LS(PRINTSCREEN))  &kp LC(LA(T))  &none     &none     &none
                                     &none         &none          &none            &none            &none                    &none
            >;
        };
    };
};
